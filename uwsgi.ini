#http ： 协议类型和端口号
#
#processes ： 开启的进程数量
#
#workers ： 开启的进程数量，等同于processes（官网的说法是spawn the specified number ofworkers / processes）
#
#chdir ： 指定运行目录（chdir to specified directory before apps loading）
#
#wsgi-file ： 载入wsgi-file（load .wsgi file）
#
#stats ： 在指定的地址上，开启状态服务（enable the stats server on the specified address）
#
#threads ： 运行线程。由于GIL的存在，我觉得这个真心没啥用。（run each worker in prethreaded mode with the specified number of threads）
#
#master ： 允许主进程存在（enable master process）
#
#daemonize ： 使进程在后台运行，并将日志打到指定的日志文件或者udp服务器（daemonize uWSGI）。实际上最常用的，还是把运行记录输出到一个本地文件上。
#
#pidfile ： 指定pid文件的位置，记录主进程的pid号。
#
#vacuum ： 当服务器退出的时候自动清理环境，删除unix socket文件和pid文件（try to remove all of the generated file/sockets）
#
#uwsgi --http :8001 --chdir/home/xiaofei/workspace/code/mycode/django_learn --wsgi-file learn/wsgi.py --master --processes 4 --threads 2 --stats 127.0.0.1:9191

[uwsgi]
# Django-related settings

socket = :8011
#http = :8011
#nginx location / settings:
#include uwsgi_params;
#uwsgi_pass 127.0.0.1:8001;

# the base directory (full path)
chdir           = /home/xiaofei/media/django/wsapp

# Django s wsgi file
module          = wsapp.wsgi

# process-related settings
# master
master          = true

# maximum number of worker processes
processes       = 4

threads		= 2

stats		= :8012

# ... with appropriate permissions - may be needed
# chmod-socket    = 664
# clear environment on exit
vacuum          = true

http-websockets = true
#ugreen = ''
http-timeout = 300
#async = 30
